#ifndef __MATITI_DDOMAIN_H__
#define __MATITI_DDOMAIN_H__

#include <Types.h>
#include <BodySP.h>
#include <Geometry/Point3D.h>
#include <VelocityBCSPArray.h>
#include <Core/ProblemSpec/ProblemSpecP.h>
#include <iostream>

namespace Matiti {

  class DDomain {

  public:  

    friend std::ostream& operator<<(std::ostream& out, const Matiti::DDomain& domain);

  public:  

    DDomain() ;
    ~DDomain();

    DDomain(const Point2D& lower, const Point2D& upper);

    DDomain(const Point2D& lower, const Point2D& upper, const IntArray2& numCells);
    
    DDomain(const Point2D& lower, const Point2D& upper, const double& horizon);

    void initialize(const Uintah::ProblemSpecP& ps);

    const Point2D& lower() const;
    const Point2D& upper() const;
    const double& horizon() const;
    const double& xrange() const;
    const double& yrange() const;
    const double& zrange() const;
    const IntArray2& numCells() const;
    const double totalCells() const;

    void findCellIndex(const Point2D& point,
                       IntArray2& cell) const;
    void findCellIndex(const long64& cell_key,
                       IntArray2& cell) const;

    bool inside(const Point2D& point) const;

    void applyVelocityBC(BodySP& body) const;

    bool intersection(const Point2D& point, const Vector2D& ray,
                      Point2D& hitPoint) const;

  private:

    Point2D d_lower;
    Point2D d_upper;

    double d_xrange;
    double d_yrange;
    double d_zrange;
    double d_horizon;
    double d_ghost;
    double d_thick;

    int d_particlesperelement;

    IntArray2 d_num_cells;
    VelocityBCSPArray d_vel_BC;

    // Don't allow copy
    DDomain(const Domain& dom);
    DDomain& operator=(const Domain& dom);

  };  // end class
}  // end namespace
#endif
